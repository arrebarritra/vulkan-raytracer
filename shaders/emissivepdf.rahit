#version 460

#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require

#include "geometry.glsl"
#include "material.glsl"
#include "texture.glsl"
#include "random.glsl"
#include "payload.glsl"
#include "light.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 4, set = 0, scalar) uniform PathTracingProperties{
    uint sampleCount, maxRayDepth;
} pathTracing;

layout(location = 3) rayPayloadInEXT EmissivePDFPayload payload;
hitAttributeEXT vec2 attribs;

struct HitInfo {
    vec3 normal;
    float area;
};

HitInfo unpackTriangle(uint idx, vec3 weights) {
    GeometryInfo geometryInfo = geometryInfos[gl_InstanceCustomIndexEXT];
    Indices indexBuffer = Indices(geometryInfo.indexBufferAddress);
    Vertices vertexBuffer = Vertices(geometryInfo.vertexBufferAddress);
    
    HitInfo hitInfo;
    hitInfo.normal = vec3(0.0);
    vec2 uv = vec2(0.0);
    vec3 v[3];
    for (int i = 0; i < 3; i++) {
        uint index = indexBuffer.indices[3 * idx + i];
        Vertex vertex = vertexBuffer.vertices[index];

        v[i] = vec3(gl_ObjectToWorldEXT * vec4(vertex.pos, 1.0));
        hitInfo.normal += vertex.normal * weights[i];
        uv += vertex.uv * weights[i];
    }
    hitInfo.area = 0.5 * length(cross(v[1] - v[0], v[2] - v[0]));
    hitInfo.normal = sign(dot(-gl_WorldRayDirectionEXT, hitInfo.normal)) * normalize(hitInfo.normal);

    return hitInfo;
}

void main() {
    const vec3 barycentricCoords = vec3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);
    HitInfo hitInfo = unpackTriangle(gl_PrimitiveID, barycentricCoords);
    
    // We do not check if triangle is emissive since the ray cullMask will assure we only intersect emissive surfaces
    EmissiveSurface es = emissiveSurfaces[gl_InstanceCustomIndexEXT];
    float pTriangle = gl_PrimitiveID == 0 ? emissiveTriangles[es.baseEmissiveTriangleIdx].pHeuristic : 
        emissiveTriangles[es.baseEmissiveTriangleIdx + gl_PrimitiveID].pHeuristic - emissiveTriangles[es.baseEmissiveTriangleIdx + gl_PrimitiveID - 1].pHeuristic;
    payload.pdf += pTriangle * (gl_HitTEXT * gl_HitTEXT) / (hitInfo.area * dot(hitInfo.normal, -gl_WorldRayDirectionEXT));

    ignoreIntersectionEXT;
}