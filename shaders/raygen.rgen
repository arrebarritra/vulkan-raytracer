#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require

#include "constants.glsl"
#include "maths.glsl"
#include "payload.glsl"
#include "random.glsl"
#include "hdr.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D accumulationImage;
layout(binding = 2, set = 0, rgba8) uniform image2D outputImage;
layout(binding = 3, set = 0, scalar) uniform CameraProperties {
    mat4 viewInverse, projInverse;
} cam;

layout(binding = 4, set = 0, scalar) uniform PathTracingProperties{
    uint sampleCount, maxRayDepth;
    float skyboxStrength;
} pathTracing;

layout(location = 0) rayPayloadEXT RayPayload payload;

#include "lightsample.glsl"

void main() {
    payload.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pathTracing.sampleCount);
    vec2 jitter = pathTracing.sampleCount == 0u ? vec2(0.5, 0.5) : rndSquare(payload.seed);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + jitter;
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    d.y = -d.y;

    vec3 target = vec3(cam.projInverse * vec4(d.x, d.y, 1, 1));
    vec3 origin = vec3(cam.viewInverse * vec4(0,0,0,1));
    vec3 direction = normalize(vec3(cam.viewInverse * vec4(normalize(target.xyz), 0)));
    float materialSamplePDF = 1.0;
    float wavelength = 0.0;

    vec3 view;
    mat3 tangentToWorld, worldToTangent;
    
    vec3 value = vec3(0.0);
    vec3 throughput = vec3(1.0);
    for (int bounce = 0; true; bounce++) {
        // Light sample
        if (bounce != 0) {
            value += throughput * sampleLights(payload.seed, payload.hitInfo, wavelength, view, worldToTangent);
        }

        // Material sample
        traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 0, 0, 0, origin, EPS, direction, INF, 0);
        tangentToWorld = mat3(payload.hitInfo.tangent, payload.hitInfo.bitangent, payload.hitInfo.normal);
        worldToTangent = transpose(tangentToWorld);

        // End traversal if emissive hit or reached max ray depth
        if (payload.hitInfo.hitMat.emissiveColour != vec3(0.0) || bounce == pathTracing.maxRayDepth || (pathTracing.sampleCount == 0u && bounce == 1)) {
            vec3 emissive = payload.hitInfo.hitMat.emissiveColour;
            
            if (emissive != vec3(0.0) && bounce != 0) {
                // Balance heuristic for emissive
                emissivePDFPayload.pdf = 0;
                traceRayEXT(topLevelAS, gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsNoOpaqueEXT, 1u << 1, 3, 0, 2, origin, EPS,
                        direction, INF, 3);
                emissive *= balanceHeuristic(materialSamplePDF, emissivePDFPayload.pdf);
            }
            value += throughput * emissive;
            break;
        }

        // Evaluate sampled material
        view = -direction;
        vec3 reflectivity;
        vec3 tView = worldToTangent * view;
        direction = tangentToWorld * sampleMaterial(payload.seed, payload.hitInfo, wavelength, tView, reflectivity, materialSamplePDF);
        throughput *= reflectivity;
        if (throughput == vec3(0.0)) break;

        // Prepare next ray
        origin = payload.hitInfo.pos + (dot(payload.hitInfo.normal, direction) >= 0.0 ? 1.0 : -1.0) * BIAS * payload.hitInfo.normal;
    }

    vec3 accumulatedValue = value;
    if (pathTracing.sampleCount != 0u) {
        vec3 prevValue = imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
        accumulatedValue += prevValue;
        imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedValue, 1.0));
    } else {
        imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(vec3(0.0), 1.0));
    }
    vec3 normalisedValue = pathTracing.sampleCount == 0u ? accumulatedValue : accumulatedValue / pathTracing.sampleCount;
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(reinhardJodie(normalisedValue), 1.0));
}